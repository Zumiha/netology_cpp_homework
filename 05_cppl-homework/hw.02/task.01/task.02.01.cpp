#include <iostream>

// семантическая — using namespace std; — не требуется использования глобального пространства имен std, далее по коду разработчик использует std::

struct point {
	double m_x;
	double m_y;
	point(double x, double y) {
		m_x = x;
		m_y = y; //семантическая — "y = y;" не выполняет задачи по изменению необходимой переменной
	}
}; //синтаксическая — не указана ";" 

void print_point(const point& point_object) {
	std::cout << "x:" << point_object.m_x << ", y: "
		<< point_object.m_y << std::endl;
}

int main() // синтаксическая — int Main () {} язык чувствителен к регистру
{
	int i; // — семантическая, объявление переменной не требуется, 
	//так как в пространстве цикла далее используется переменная i счетчика
	//но для этого необходимо объявить переменную i в условии цикла, чего не сделано

	//семантическая ";" - стоит после условия цикла тем самым завершая его. 
	//тело цикла, идущее далее, воспринимается как просто код в пространстве и выполняется без цикла (один раз)
	//с результатом в консоли x:5, y: 10
	for (i = 0; i < 5; i++)/*; - ошибка!*/ {
		point my_point(i, 2 * i);
		print_point(my_point);
	}

	return 0;
}

// void print_point(const point& point_object) {
// 	std::cout << "x:" << point_object.m_x << ", y: "
// 		<< point_object.m_y << std::endl;
// }  
// синтаксическая — функция print_point уже была обяъвлена и реализована ранее по коду. 
// так же для решения можно объявить функцию, а реализацию описать после main()